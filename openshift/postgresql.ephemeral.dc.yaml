apiVersion: v1
kind: Template
labels:
  template: postgresql-persistent-template
metadata:
  creationTimestamp: null
  name: postgresql-dc
parameters:
  - description: The name of the OpenShift Service exposed for the database.
    displayName: Database Service Name
    name: NAME
    required: true
  - name: VERSION
    required: true
  - name: SOURCE_CONTEXT_DIR
    required: true
  - name: SOURCE_REPOSITORY_URL
    required: true
  - name: SOURCE_REPOSITORY_REF
    required: true
  - name: SUFFIX
    required: false
  - name: OC_NAMESPACE
    required: true
  - name: OC_APP
    required: true
  - description: The name of the OpenShift Service exposed for the database.
    displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: postgresql
  - description: The OpenShift ImageStream name.
    displayName: IMAGE_STREAM_NAME
    name: IMAGE_STREAM_NAME
    value: openshift\patroni:10
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: IMAGE_STREAM_NAMESPACE
    value: 'openshift'
    value: 'latest'
  - description: Name of the PostgreSQL database accessed.
    displayName: PostgreSQL Database Name
    name: POSTGRESQL_DATABASE
    required: true
    value: postgresql
  - description: 'Volume space available for data, e.g. 512Mi, 2Gi.'
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 5Gi
  - name: CPU_LIMIT
    value: 500m
  - name: MEMORY_LIMIT
    value: 2Gi
  - name: CPU_REQUEST
    value: 200m
  - name: MEMORY_REQUEST
    value: 1.5Gi
  - name: STORAGE_CLASS
    value: netapp-block-file
    required: true
  - name: STORAGE_MODE
    value: ReadWriteMany
    required: true
  - name: SERVICE_ACCOUNT
    value: default
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: >-
        postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    labels:
      application: ${NAME}${SUFFIX}
      cluster-name: patroni${SUFFIX}
    name: '${NAME}${SUFFIX}'
  spec:
    ports:
      - name: postgresql
        port: 5432
        protocol: TCP
        targetPort: 5432
      - name: rest
        port: 8008
        protocol: TCP
        targetPort: 8008
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      application: ${NAME}${SUFFIX}
      cluster-name: patroni${SUFFIX}
    name: patroni-master${SUFFIX}
  spec:
    ports:
    - port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      application: ${NAME}${SUFFIX}
      cluster-name: patroni${SUFFIX}
      role: master
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: null
    generation: 3
    labels:
      application: ${NAME}${SUFFIX}
      cluster-name: patroni${SUFFIX}
    name: ${NAME}${SUFFIX}
  spec:
    podManagementPolicy: OrderedReady
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        application: ${NAME}${SUFFIX}
        cluster-name: patroni${SUFFIX}
    serviceName: ${NAME}${SUFFIX}
    template:
      metadata:
        creationTimestamp: null
        labels:
          application: ${NAME}${SUFFIX}
          cluster-name: patroni${SUFFIX}
      spec:
        containers:
        - env:
          - name: PATRONI_KUBERNETES_POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: PATRONI_KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: PATRONI_KUBERNETES_LABELS
            value: '{application: ${NAME}${SUFFIX}, cluster-name: patroni${SUFFIX}}'
          - name: PATRONI_SUPERUSER_USERNAME
            valueFrom:
              secretKeyRef:
                key: database-user
                name: '${NAME}-secret'
          - name: PATRONI_SUPERUSER_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: '${NAME}-secret'
          - name: PATRONI_REPLICATION_USERNAME
            valueFrom:
              secretKeyRef:
                key: database-user
                name: '${NAME}-secret'
          - name: PATRONI_REPLICATION_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: '${NAME}-secret'
          - name: PATRONI_SCOPE
            value: patroni${SUFFIX}
          - name: PATRONI_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: PATRONI_POSTGRESQL_DATA_DIR
            value: /home/postgres/pgdata/pgroot/data
          - name: PATRONI_POSTGRESQL_PGPASS
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: '${NAME}-secret'
          - name: PATRONI_POSTGRESQL_LISTEN
            value: 0.0.0.0:5432
          - name: PATRONI_RESTAPI_LISTEN
            value: 0.0.0.0:8008
          image: >-
            docker-registry.default.svc:5000/${OC_NAMESPACE}-tools/patroni@sha256:214f0c96b5162fd5b08976d3c62f2a3f95bf3485d2145d7d8f9fc1ec2b8ff39a
          imagePullPolicy: IfNotPresent
          name: ${NAME}${SUFFIX}
          ports:
          - containerPort: 8008
            protocol: TCP
          - containerPort: 5432
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /home/postgres/pgdata
            name: ${NAME}${SUFFIX}
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: default
        serviceAccountName: default
        terminationGracePeriodSeconds: 0
        volumes:
        - name: ${NAME}${SUFFIX}
          persistentVolumeClaim:
            claimName: ${NAME}${SUFFIX}
    updateStrategy:
      type: OnDelete
    volumeClaimTemplates:
    - metadata:
        labels:
          application: ${NAME}${SUFFIX}
        name: ${NAME}${SUFFIX}
      spec:
        accessModes:
        - ReadWriteMany
        resources:
          requests:
            storage: ${VOLUME_CAPACITY}
- apiVersion: v1
  kind: Endpoints
  metadata:
    labels:
      application: ${NAME}${SUFFIX}
      cluster-name: patroni${SUFFIX}
    name: ${NAME}${SUFFIX}
  subsets: []
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    name: ${SERVICE_ACCOUNT}
  rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    verbs:
    - create
    - get
    - list
    - patch
    - update
    - watch
    - delete
  - apiGroups:
    - ""
    resources:
    - endpoints
    verbs:
    - get
    - patch
    - update
    - create
    - list
    - watch
    - delete
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - get
    - list
    - patch
    - update
    - watch
